generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id                    String               @id @default(auto()) @map("_id") @db.ObjectId
    fullName              String
    password              String
    email                 String               @unique
    username              String               @unique
    updatedAt             DateTime             @updatedAt
    dailyWithdrawalAmount Float                @default(0)
    lastWithdrawalReset   DateTime             @default(now())
    createdAt             DateTime             @default(now())
    userStatus            UserStatus           @default(active)
    role                  Roles                @default(user)
    ip_info               Ip?
    totp                  Totp?
    wallet                Wallet?
    profile               Profile?
    logs                  Log[]
    invoices              Invoice[]
    recipients            Recipient[]
    banks                 LinkedBank[]
    notifications         Notification[]
    walletAddresses       WalletAddress[]
    transactionHistories  TransactionHistory[]
    lastUsedBiometricAt   DateTime?
    lastUsedCredAt        DateTime?
    lastLoggedInAt        DateTime?
    lastPasswordChanged   DateTime             @default(now())
    level                 Level                @relation(fields: [levelId], references: [id])
    levelId               String               @db.ObjectId
}

model Profile {
    id              String     @id @default(auto()) @map("_id") @db.ObjectId
    phone           String     @unique
    bvn             String?    @unique
    bvn_verified    Boolean    @default(false)
    pin             String?
    lastPinChanged  DateTime?
    deviceToken     String?
    primaryAsset    AssetType?
    avatar          File?
    email_verified  Boolean    @default(false)
    state_of_origin String?
    nationality     String?
    dob             String?
    user            User       @relation(fields: [userId], references: [id])
    userId          String     @unique @db.ObjectId
}

model Ip {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @unique @db.ObjectId

    ip               String
    type             String
    continent        String
    continentCode    String
    country          String
    countryCode      String
    region           String
    regionCode       String
    city             String
    latitude         Float
    longitude        Float
    isEu             Boolean
    postal           String
    callingCode      String
    capital          String
    borders          String
    flagImg          String
    flagEmoji        String
    flagEmojiUnicode String

    connectionAsn    Int
    connectionOrg    String
    connectionIsp    String
    connectionDomain String

    currencyName   String
    currencyCode   String
    currencySymbol String
    currencyPlural String
}

model Level {
    id           String          @id @default(auto()) @map("_id") @db.ObjectId
    name         LeveLName       @unique @default(TIER_1)
    constraints  LevelConstraint @relation(fields: [constraintId], references: [id])
    constraintId String          @unique @db.ObjectId
    users        User[]
}

model LevelConstraint {
    id                  String @id @default(auto()) @map("_id") @db.ObjectId
    maxDailyWithdrawal  Float
    maxSingleWithdrawal Float
    level               Level?
}

model LevelConstraintTierOne {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    name                LeveLName @default(TIER_1)
    maxDailyWithdrawal  Float     @default(500000)
    maxSingleWithdrawal Float     @default(50000)
}

model LevelConstraintTierTwo {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    name                LeveLName @default(TIER_2)
    maxDailyWithdrawal  Float     @default(1000000)
    maxSingleWithdrawal Float     @default(200000)
}

model LevelConstraintTierThree {
    id                  String    @id @default(auto()) @map("_id") @db.ObjectId
    name                LeveLName @default(TIER_3)
    maxDailyWithdrawal  Float     @default(1000000000)
    maxSingleWithdrawal Float     @default(500000)
}

model BlacklistedIP {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    ip String @unique
}

model WaitList {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    email String @unique
}

model Modmin {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    fullName String
    password String
    email    String @unique
    role     Roles  @default(moderator)
    logs     Log[]
}

enum Roles {
    user
    admin
    moderator
}

model Cache {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    key          String   @unique
    value        Int?
    expires_in   Int?
    scope        String?
    token_type   String?
    access_token String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Totp {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    otp        String?
    otp_expiry DateTime?
    user       User      @relation(fields: [userId], references: [id])
    userId     String    @unique @db.ObjectId
}

model Log {
    id                  String   @id @default(auto()) @map("_id") @db.ObjectId
    ip                  String
    endpoint            String
    query               String?
    os                  String?
    device              String?
    browser             String?
    deviceType          String?
    method              Method
    full_url            String
    userAgent           String
    statusCode          Int
    requestSize         String
    responseSize        String
    elapsedTimeDuration String
    requestedAt         DateTime
    responsedAt         DateTime
    user                User?    @relation(fields: [userId], references: [id])
    userId              String?  @unique @db.ObjectId
    modmin              Modmin?  @relation(fields: [modminId], references: [id])
    modminId            String?  @unique @db.ObjectId
}

model Wallet {
    id                  String               @id @default(auto()) @map("_id") @db.ObjectId
    ngnBalance          Float                @default(0.00)
    usdBalance          Float                @default(0.00)
    lastAmountWithdrawn Float                @default(0.00)
    lastAmountDeposited Float                @default(0.00)
    lastWithdrewAt      DateTime?
    lasCurrencyEffect   TransactionCurrency?
    lastDepoistedAt     DateTime?
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    user                User                 @relation(fields: [userId], references: [id])
    userId              String               @unique @db.ObjectId
}

model LinkedBank {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    bankName      String
    accountName   String
    accountNumber String
    bankCode      String
    primary       Boolean  @default(false)
    updatedAt     DateTime @updatedAt
    createdAt     DateTime @default(now())
    user          User     @relation(fields: [userId], references: [id])
    userId        String   @unique @db.ObjectId
}

model Recipient {
    id                 String        @id @default(auto()) @map("_id") @db.ObjectId
    recipient_type     RecipientType
    createdAt          DateTime
    domain             String?
    recipient_id       Int?
    recipient_code     String?       @unique
    integration        Int?
    type               String?       @default("nuban")
    bank_code          String?
    bank_name          String?
    account_name       String?
    account_number     String?
    authorization_code String?
    fullname           String?
    username           String?
    user               User          @relation(fields: [userId], references: [id])
    userId             String        @unique @db.ObjectId
    updatedAt          DateTime
}

model Prices {
    id                String               @id @default(auto()) @map("_id") @db.ObjectId
    assetType         String?
    label             String?
    currentPrice      Float?
    ngn_current_price Float?
    usd_current_price Float?
    ngn_1h_price      Float?
    usd_1h_price      Float?
    ngn_24h_price     Float?
    usd_24h_price     Float?
    usd_24h_change    Float?
    ngn_24h_change    Float?
    timestampCurrent  Int?
    timestamp1hr      Int?
    timestamp24hr     Int?
    currency          TransactionCurrency?
    tradeType         TradeType?
    walletId          String?              @unique
    desc              String?
}

model WalletAddress {
    id                        String    @id @default(auto()) @map("_id") @db.ObjectId
    uid                       String    @unique
    guid                      String
    address                   String
    addressRef                String
    mode                      String
    network                   String
    assetType                 String
    addressType               String
    isContract                Boolean
    isChangeAddress           Boolean
    derivationIndex           Int
    label                     String
    chain                     String
    assetId                   String
    organizationId            String
    accountId                 String
    subAccountId              String?
    used                      Boolean
    addressContractIdentifier String?
    deploymentParams          Json?
    lastUsedAt                DateTime? @db.Date
    user                      User?     @relation(fields: [userId], references: [id])
    userId                    String    @unique @db.ObjectId
}

model walletAccount {
    id                          String   @id @default(auto()) @map("_id") @db.ObjectId
    uid                         String   @unique
    externalId                  String
    fiatCurrency                String
    name                        String
    type                        String
    showInDashboard             Boolean
    isDeleted                   Boolean
    isArchived                  Boolean
    organizationId              String
    network                     String
    createdAt                   DateTime
    mode                        String
    maxDailyAmount              Int
    maxMonthlyAmount            Int
    maxDailyTransactionsCount   Int
    maxMonthlyTransactionsCount Int
    whiteListAddresses          Json?
    isActive                    Boolean  @default(true)
    received                    String   @default("0.00")
    sent                        String   @default("0.00")
    balance                     String   @default("0.00")
    pending                     String   @default("0.00")
    blocked                     String   @default("0.00")
    assets                      Asset[]
}

model Asset {
    id                 String        @id @default(auto()) @map("_id") @db.ObjectId
    uid                String        @unique
    guid               String
    label              String
    isDeleted          Boolean
    isArchived         Boolean
    isContract         Boolean
    chain              String
    network            String
    mode               String
    assetType          String
    autoForwardAddress String?
    received           String        @default("0.00")
    sent               String        @default("0.00")
    balance            String        @default("0.00")
    pending            String        @default("0.00")
    blocked            String        @default("0.00")
    createdAt          DateTime
    account            walletAccount @relation(fields: [accountId], references: [id])
    accountId          String        @unique @db.ObjectId
}

model TransactionHistory {
    id                       String               @id @default(auto()) @map("_id") @db.ObjectId
    ip                       String?
    ref                      String               @unique
    hash                     String?              @unique
    type                     TransactionType
    chain                    String?
    label                    String?
    amount                   Float
    settlementAmount         Float?
    recipient                Int?
    customer_code            String?
    transferCode             String?
    nairaAmount              Float?
    dollarAmount             Float?
    dollarRate               Float?
    status                   TransferStatus
    source                   TransactionSource
    sourceType               String?
    address                  String?
    assetId                  String?
    assetType                String?
    blockHash                String?
    timestamp                String?
    blockHeight              String?
    inward_source            TransactionCurrency?
    outward_source           TransactionCurrency?
    confirmation             Int?
    description              String?
    senderAddress            String?
    idempotencyKey           String?              @unique
    broadcastedAt            DateTime?
    processingFee            Float?
    paystackFee              Float?
    totalFee                 Float?
    createdAt                DateTime             @default(now())
    destinationAccountName   String?
    destinationAccountNumber String?
    destinationBankCode      String?
    destinationBankName      String?
    sourceAccountName        String?
    sourceAccountNumber      String?
    sourceBankCode           String?
    sourceBankName           String?
    sourceAccountCountry     String?
    channel                  String?
    currency                 TransactionCurrency?
    narration                String?
    authorization_code       String?
    updatedAt                DateTime             @updatedAt
    user                     User                 @relation(fields: [userId], references: [id])
    userId                   String               @unique @db.ObjectId
}

model Notification {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    read        Boolean  @default(false)
    title       String
    description String
    hash        String?  @unique
    reference   String?
    notifiedAt  DateTime @default(now())
    user        User     @relation(fields: [userId], references: [id])
    userId      String   @unique @db.ObjectId
}

model Invoice {
    id            String              @id @default(auto()) @map("_id") @db.ObjectId
    invoiceNo     String              @unique
    subject       String
    issuer_name   String
    issuer_email  String
    issuer_phone  String
    currency      TransactionCurrency
    clientInfo    String
    isFree        Boolean
    totalAmount   Float
    description   String?
    bankName      String?
    accountName   String?
    accountNumber String?
    walletAddress String?
    mode          String?
    chain         String?
    label         String?
    network       String?
    assetId       String?
    assetType     AssetType?
    addressType   String?
    orderNo       String?
    items         Item[]
    paymentType   TransactionSource
    createdAt     DateTime            @default(now())
    user          User                @relation(fields: [userId], references: [id])
    userId        String              @unique @db.ObjectId
}

model Report {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    category    String
    subject     String?
    description String
    attachments File[]
}

enum AssetType {
    ETH
    BTC
    BSC
    USDT
}

enum UserStatus {
    suspended
    active
}

enum TransactionCurrency {
    USD
    NGN
}

enum TradeType {
    SELL
    BUY
}

enum TransferStatus {
    FAILED
    PENDING
    SUCCESS
    COMPLETED
    REVERSED
    RECEIVED
}

enum TransactionType {
    DEPOSIT
    RESOURCE
    DISBURSEMENT
    CONVERSION
}

enum TransactionSource {
    crypto
    fiat
}

enum Method {
    POST
    DELETE
    PATCH
    PUT
    GET
    OPTION
}

enum LeveLName {
    TIER_1
    TIER_2
    TIER_3
}

enum RecipientType {
    in_app
    provider
}

type File {
    idx        String @default(uuid())
    public_id  String
    public_url String
    secure_url String
}

type Item {
    idx      String @default(uuid())
    name     String
    rate     Float?
    amount   Float?
    quantity Float?
}
